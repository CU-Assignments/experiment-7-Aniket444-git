CREATE TABLE Product (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Price DOUBLE,
    Quantity INT
);
===== Product Management System =====
1. Create Product
2. Read Products
3. Update Product
4. Delete Product
5. Exit
Enter your choice: 1
Enter ProductID (integer): 1
Enter Product Name: Laptop
Enter Product Price: 1000.50
Enter Product Quantity: 10
Product added successfully!
CREATE TABLE Student (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(100),
    Department VARCHAR(100),
    Marks DOUBLE
);
public class Student {
    private int studentID;
    private String name;
    private String department;
    private double marks;

    // Constructors
    public Student(int studentID, String name, String department, double marks) {
        this.studentID = studentID;
        this.name = name;
        this.department = department;
        this.marks = marks;
    }

    public Student() {}

    // Getters and Setters
    public int getStudentID() {
        return studentID;
    }

    public void setStudentID(int studentID) {
        this.studentID = studentID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }

    public double getMarks() {
        return marks;
    }

    public void setMarks(double marks) {
        this.marks = marks;
    }

    // toString() method for displaying student data
    @Override
    public String toString() {
        return "StudentID: " + studentID + ", Name: " + name + ", Department: " + department + ", Marks: " + marks;
    }
}
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class StudentController {
    private static final String URL = "jdbc:mysql://localhost:3306/your_database_name"; // Replace with your database URL
    private static final String USER = "your_username"; // Replace with your MySQL username
    private static final String PASSWORD = "your_password"; // Replace with your MySQL password

    // Create a new student
    public void createStudent(Student student) {
        String sql = "INSERT INTO Student (StudentID, Name, Department, Marks) VALUES (?, ?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, student.getStudentID());
            stmt.setString(2, student.getName());
            stmt.setString(3, student.getDepartment());
            stmt.setDouble(4, student.getMarks());

            stmt.executeUpdate();
            System.out.println("Student added successfully!");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Read all students
    public List<Student> readAllStudents() {
        List<Student> students = new ArrayList<>();
        String sql = "SELECT * FROM Student";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                Student student = new Student(
                        rs.getInt("StudentID"),
                        rs.getString("Name"),
                        rs.getString("Department"),
                        rs.getDouble("Marks")
                );
                students.add(student);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return students;
    }

    // Update an existing student
    public void updateStudent(Student student) {
        String sql = "UPDATE Student SET Name = ?, Department = ?, Marks = ? WHERE StudentID = ?";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, student.getName());
            stmt.setString(2, student.getDepartment());
            stmt.setDouble(3, student.getMarks());
            stmt.setInt(4, student.getStudentID());

            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated > 0) {
                System.out.println("Student updated successfully!");
            } else {
                System.out.println("No student found with ID: " + student.getStudentID());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // Delete a student
    public void deleteStudent(int studentID) {
        String sql = "DELETE FROM Student WHERE StudentID = ?";
        try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, studentID);
            int rowsDeleted = stmt.executeUpdate();
            if (rowsDeleted > 0) {
                System.out.println("Student deleted successfully!");
            } else {
                System.out.println("No student found with ID: " + studentID);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
import java.util.List;
import java.util.Scanner;

public class StudentView {
    private Scanner scanner;
    private StudentController controller;

    public StudentView() {
        scanner = new Scanner(System.in);
        controller = new StudentController();
    }

    public void displayMenu() {
        while (true) {
            System.out.println("\n===== Student Management System =====");
            System.out.println("1. Create Student");
            System.out.println("2. Read Students");
            System.out.println("3. Update Student");
            System.out.println("4. Delete Student");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    createStudent();
                    break;
                case 2:
                    readStudents();
                    break;
                case 3:
                    updateStudent();
                    break;
                case 4:
                    deleteStudent();
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice! Please try again.");
            }
        }
    }

    private void createStudent() {
        System.out.print("Enter StudentID: ");
        int studentID = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Department: ");
        String department = scanner.nextLine();
        System.out.print("Enter Marks: ");
        double marks = scanner.nextDouble();

        Student student = new Student(studentID, name, department, marks);
        controller.createStudent(student);
    }

    private void readStudents() {
        List<Student> students = controller.readAllStudents();
        System.out.println("\nList of Students:");
        for (Student student : students) {
            System.out.println(student);
        }
    }

    private void updateStudent() {
        System.out.print("Enter StudentID to update: ");
        int studentID = scanner.nextInt();
        scanner.nextLine(); // Consume the newline character
        System.out.print("Enter new Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter new Department: ");
        String department = scanner.nextLine();
        System.out.print("Enter new Marks: ");
        double marks = scanner.nextDouble();

        Student student = new Student(studentID, name, department, marks);
        controller.updateStudent(student);
    }

    private void deleteStudent() {
        System.out.print("Enter StudentID to delete: ");
        int studentID = scanner.nextInt();
        controller.deleteStudent(studentID);
    }
}
public class StudentApp {
    public static void main(String[] args) {
        StudentView view = new StudentView();
        view.displayMenu();
    }
}
===== Student Management System =====
1. Create Student
2. Read Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 1
Enter StudentID: 101
Enter Name: John Doe
Enter Department: Computer Science
Enter Marks: 85.5
Student added successfully!

===== Student Management System =====
1. Create Student
2. Read Students
3. Update Student
4. Delete Student
5. Exit
Enter your choice: 2

List of Students:
StudentID: 101, Name: John Doe, Department: Computer Science, Marks: 85.5
